"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var router_1 = require('@angular/router');
var auth_service_1 = require('../shared/services/auth.service');
var forms_1 = require('@angular/forms');
var myGlobals = require('../globals');
var CustomValidators_1 = require('../shared/utils/CustomValidators');
var ViewProfileComponent = (function () {
    function ViewProfileComponent(builder, _router, authService) {
        this.builder = builder;
        this._router = _router;
        this.authService = authService;
        this.invaliddomain = true;
        this.invalid = false;
        this.loading = false;
        this.cropperloading = false;
        this.noprofile = false;
        this.filechanged = false;
        this.active = true;
        this.statusCode = 200;
        this.createForm();
        console.log("Is MyGlobal user > " + myGlobals.LoginUser);
    }
    ViewProfileComponent.prototype.createForm = function () {
        this.name = new forms_1.FormControl('', forms_1.Validators.required);
        this.email = new forms_1.FormControl('', forms_1.Validators.compose([forms_1.Validators.required, CustomValidators_1.CustomValidators.emailValidator]));
        this.subdomain = new forms_1.FormControl('', forms_1.Validators.required);
        this.timezone = new forms_1.FormControl('');
        this.local = new forms_1.FormControl('');
        this.language = new forms_1.FormControl('');
        this.currency = new forms_1.FormControl('');
        this.profileform = this.builder.group({
            name: this.name,
            email: this.email,
            subdomain: this.subdomain,
            timezone: this.timezone,
            local: this.local,
            language: this.language,
            currency: this.currency
        });
    };
    ViewProfileComponent.prototype.savecropimage = function () {
        var _this = this;
        var $image = $('#image');
        var cropBoxData;
        var canvasData;
        var croppedcanvas;
        cropBoxData = $image.cropper('getCropBoxData');
        canvasData = $image.cropper('getCanvasData');
        croppedcanvas = $image.cropper('getCroppedCanvas');
        this.filename = croppedcanvas.toDataURL("image/png");
        this.loginUser = myGlobals.LoginUser;
        this.authService.profilebase64(this.filename, this.loginUser.id)
            .subscribe(function (result) {
            if (result) {
                _this.url = result.profileData.ImageUrl;
                _this.filechanged = true;
                setTimeout(function () {
                    this.filename = this.url;
                }, 5000);
            }
            else {
                _this.filename = "uploads/user_icon.png";
            }
            _this.loading = false;
        }, function (error) {
            _this.errorMsg = error;
            _this.loading = false;
            console.log("profile image upload fail: " + error);
        });
        $image.cropper('destroy');
        $("#frmBrowse")[0].reset();
        $('#myModal').modal('hide');
    };
    ViewProfileComponent.prototype.onCropperPopupDone = function () {
        var _this = this;
        var $image = this.cropAvtar.$img;
        var croppedcanvas = $image.cropper('getCroppedCanvas');
        this.filename = croppedcanvas.toDataURL("image/png");
        this.loginUser = myGlobals.LoginUser;
        this.cropperloading = true;
        this.authService.profilebase64(this.filename, this.loginUser.id)
            .subscribe(function (result) {
            if (result.data.profileimage) {
                var self = _this;
                setTimeout(function () {
                    self.filename = myGlobals.imageUrl + "/upload/profiles/" + result.data.profileimage;
                    myGlobals.LoginUser.profileimage = result.data.profileimage;
                    window.localStorage['user'] = JSON.stringify(myGlobals.LoginUser);
                    self.authService.emitProfileChange();
                }, 3000);
            }
            else {
                _this.filename = "uploads/user_icon.png";
            }
            _this.loading = false;
            $('#avatar-modal').modal('hide');
            _this.cropperloading = false;
        }, function (error) {
            _this.errorMsg = error;
            _this.loading = false;
            console.log("profile image upload fail: " + error);
            _this.cropperloading = false;
        });
    };
    ViewProfileComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.cropAvtar = new CropAvatar($('#crop-avatar'));
        ;
        this.loginUser = myGlobals.LoginUser;
        if (this.loginUser != null) {
            this.authService.viewprofile(this.loginUser.id)
                .subscribe(function (result) {
                if (result) {
                    console.log(result.data);
                    _this.profileform.controls['name'].updateValue(result.data.firstname + " " + result.data.lastname);
                    _this.profileform.controls['email'].updateValue(result.data.email);
                    _this.profileform.controls['subdomain'].updateValue(result.data.subdomain + ".viewfoo.pro");
                    _this.profileform.controls['timezone'].updateValue(result.data.timezone);
                    _this.profileform.controls['local'].updateValue(result.data.local);
                    _this.profileform.controls['language'].updateValue(result.data.language);
                    _this.profileform.controls['currency'].updateValue(result.data.currency);
                    if (result.data.profileimage)
                        _this.filename = myGlobals.imageUrl + "/upload/profiles/" + result.data.profileimage;
                    else
                        _this.filename = "uploads/user_icon.png";
                }
            }, function (error) {
                _this.errorMsg = error;
                _this.loading = false;
                console.log(" view profile fail: " + error);
            });
        }
    };
    ViewProfileComponent.prototype.editprofile = function () {
        var _this = this;
        var formdata = this.profileform.value;
        formdata["id"] = this.loginUser.id;
        console.log(formdata);
        this.authService.editprofile(formdata)
            .subscribe(function (result) {
            myGlobals.LoginUser.firstname = result.data.firstname;
            myGlobals.LoginUser.lastname = result.data.lastname;
            myGlobals.LoginUser.email = result.data.email;
            myGlobals.LoginUser.subdomain = result.data.subdomain;
            myGlobals.LoginUser.timezone = result.data.timezone;
            myGlobals.LoginUser.local = result.data.local;
            myGlobals.LoginUser.currency = result.data.currency;
            myGlobals.LoginUser.profileimage = result.data.profileimage;
            window.localStorage['user'] = JSON.stringify(myGlobals.LoginUser);
        }, function (error) {
            _this.errorMsg = error;
            _this.loading = false;
            console.log(" view profile fail: " + error);
        });
    };
    ViewProfileComponent.prototype.chksubdomain = function (subdomain) {
        var _this = this;
        this.invaliddomain = false;
        if (subdomain.length != 0) {
            var n = subdomain.indexOf(".viewfoo.pro");
            var sub = subdomain.substr(0, n);
            this.authService.chksubdomain(sub)
                .subscribe(function (result) {
                _this.invaliddomain = false;
            }, function (error) {
                _this.domainmessage = error;
                _this.invaliddomain = true;
                console.log("subdomain  fail: " + error);
            });
        }
    };
    ViewProfileComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'viewprofile',
            templateUrl: 'viewprofile.component.html',
            directives: [forms_1.REACTIVE_FORM_DIRECTIVES, router_1.ROUTER_DIRECTIVES]
        }), 
        __metadata('design:paramtypes', [forms_1.FormBuilder, router_1.Router, auth_service_1.AuthService])
    ], ViewProfileComponent);
    return ViewProfileComponent;
}());
exports.ViewProfileComponent = ViewProfileComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
