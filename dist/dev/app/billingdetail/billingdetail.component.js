"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var router_1 = require('@angular/router');
var auth_service_1 = require('../shared/services/auth.service');
var forms_1 = require('@angular/forms');
var myGlobals = require('../globals');
var CustomValidators_1 = require('../shared/utils/CustomValidators');
var BillingDetailComponent = (function () {
    function BillingDetailComponent(builder, _router, authService) {
        this.builder = builder;
        this._router = _router;
        this.authService = authService;
        this.loading = false;
        this.paymenttype = "monthly";
        this.invalidcard = false;
        this.squareerror = false;
        this.ismonthly = true;
        this.isloading = false;
        this.ismessage = false;
        this.month = ['01', '02', '03', '04', '05', '06',
            '07', '08', '09', '10', '11', '12'];
        this.createForm();
        this.loginUser = myGlobals.LoginUser;
    }
    BillingDetailComponent.prototype.createForm = function () {
        this.firstname = new forms_1.FormControl('', forms_1.Validators.required);
        this.lastname = new forms_1.FormControl('', forms_1.Validators.required);
        this.email = new forms_1.FormControl('', forms_1.Validators.compose([forms_1.Validators.required, CustomValidators_1.CustomValidators.emailValidator]));
        this.businessname = new forms_1.FormControl('', forms_1.Validators.required);
        this.bill_firstname = new forms_1.FormControl('', forms_1.Validators.required);
        this.bill_lastname = new forms_1.FormControl('', forms_1.Validators.required);
        this.cc_number = new forms_1.FormControl('', forms_1.Validators.compose([forms_1.Validators.required, CustomValidators_1.CustomValidators.cardValidator]));
        this.expirydate = new forms_1.FormControl('', forms_1.Validators.required);
        this.expiryyear = new forms_1.FormControl('', forms_1.Validators.required);
        this.ccv = new forms_1.FormControl('', forms_1.Validators.compose([forms_1.Validators.required, CustomValidators_1.CustomValidators.cvvValidator]));
        this.address = new forms_1.FormControl('', forms_1.Validators.required);
        this.app = new forms_1.FormControl('', forms_1.Validators.required);
        this.city = new forms_1.FormControl('', forms_1.Validators.required);
        this.state = new forms_1.FormControl('', forms_1.Validators.required);
        this.zipcode = new forms_1.FormControl('', forms_1.Validators.compose([forms_1.Validators.required, CustomValidators_1.CustomValidators.zipValidator]));
        this.country = new forms_1.FormControl('', forms_1.Validators.required);
        this.billform = this.builder.group({
            firstname: this.firstname,
            lastname: this.lastname,
            email: this.email,
            businessname: this.businessname,
            bill_firstname: this.bill_firstname,
            bill_lastname: this.bill_lastname,
            cc_number: this.cc_number,
            expirydate: this.expirydate,
            expiryyear: this.expiryyear,
            ccv: this.ccv,
            address: this.address,
            app: this.app,
            city: this.city,
            state: this.state,
            zipcode: this.zipcode,
            country: this.country
        });
    };
    BillingDetailComponent.prototype.ngOnInit = function () {
        if (this.loginUser) {
            this.billform.controls['firstname'].updateValue(this.loginUser.firstname);
            this.billform.controls['lastname'].updateValue(this.loginUser.lastname);
            this.billform.controls['email'].updateValue(this.loginUser.email);
            this.billform.controls['businessname'].updateValue(this.loginUser.firstname + " " + this.loginUser.lastname);
        }
        this.loginUser = myGlobals.LoginUser;
        this.calculatedays();
        $(".CBpaymenttype").change(function () {
            var checked = $(this).is(':checked');
            $(".CBpaymenttype").prop('checked', false);
            if (checked) {
                $(this).prop('checked', true);
            }
        });
    };
    BillingDetailComponent.prototype.ngAfterViewInit = function () {
    };
    BillingDetailComponent.prototype.calculatedays = function () {
        this.date = new Date();
        this.subenddate = new Date(this.loginUser.subscriptionenddate);
        if (this.subenddate < this.date) {
            this.day = 0;
        }
        else {
            var diff = (this.subenddate) - (this.date);
            this.day = Math.round(diff / 86400000);
        }
    };
    BillingDetailComponent.prototype.updatebill = function () {
        this.isloading = true;
        this.generatetoken();
        var self = this;
        setTimeout(function () {
            var formdata = self.billform.value;
            var token = ($("#stripeToken").val());
            console.log("after time out");
            console.log(token);
            var cc_id = (formdata.cc_number).toString();
            var lastthree = cc_id.substr(cc_id.length - 3);
            var cardnumber = "xxx-xxx-xxx-" + lastthree;
            formdata["userid"] = self.loginUser.id;
            formdata["cardtoken"] = token;
            formdata["cardnumber"] = cardnumber;
            formdata["paymenttype"] = self.paymenttype;
            formdata["paymentgatway"] = "stripe";
            console.log(formdata);
            self.authService.billing(formdata)
                .subscribe(function (result) {
                self.isloading = false;
                self.message = result.data;
                self.ismessage = true;
                if (result.userdetail) {
                    window.localStorage['user'] = JSON.stringify(result.userdetail);
                    self.loginUser = result.userdetail;
                    myGlobals.LoginUser = self.loginUser;
                }
                self.calculatedays();
                $("#errors").empty();
                setTimeout(function () {
                    self._router.navigate(['/']);
                }, 4000);
            }, function (error) {
                self.isloading = false;
                self.message = error;
                self.ismessage = true;
                console.log(" billing fail: " + error);
            });
        }, 4000);
    };
    BillingDetailComponent.prototype.chngpaymenttype = function (value) {
        if (value == "monthly") {
            this.ismonthly = true;
        }
        else if (value == "yearly") {
            this.ismonthly = false;
        }
        this.paymenttype = value;
    };
    BillingDetailComponent.prototype.resetform = function () {
        this.createForm();
    };
    BillingDetailComponent.prototype.generatetoken = function () {
        var formdata = this.billform.value;
        var ccnumber = formdata.cc_number;
        var month = formdata.expirydate;
        var year = formdata.expiryyear;
        var ccv = formdata.ccv;
        Stripe.setPublishableKey('pk_test_iOkLeaO4mZGOHZ2x6d6MYJdq');
        if ((Stripe.card.validateExpiry(month, year)) && (Stripe.card.validateCardNumber(ccnumber)) && (Stripe.card.validateCVC(ccv))) {
            Stripe.card.createToken({
                number: ccnumber,
                cvc: ccv,
                exp_month: month,
                exp_year: year
            }, stripeResponseHandler);
            this.invalidcard = false;
        }
        else {
            this.invalidcard = true;
            console.log("card information invalid");
        }
    };
    BillingDetailComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'billingdetail',
            templateUrl: 'billingdetail.component.html',
            directives: [forms_1.REACTIVE_FORM_DIRECTIVES, router_1.ROUTER_DIRECTIVES]
        }), 
        __metadata('design:paramtypes', [forms_1.FormBuilder, router_1.Router, auth_service_1.AuthService])
    ], BillingDetailComponent);
    return BillingDetailComponent;
}());
exports.BillingDetailComponent = BillingDetailComponent;
function stripeResponseHandler(status, response) {
    var $form = $('#billingform');
    var self = this;
    if (response.error) {
        $form.find('.bank-errors').text(response.error.message);
        $form.find('button').prop('disabled', false);
    }
    else {
        var token = response.id;
        console.log(token);
        $form.append("<input type='hidden' id='stripeToken' value='" + token + "' />");
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
